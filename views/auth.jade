//- views/auth.jade
extends layout

block content
  style.
    :root{
      /* Soft, minimal palette */
      --bg1:#0e1320; --bg2:#0e1320;
      --card:#121a2b; --border:#1f2a3d;
      --text:#e7ecf5; --muted:#9aa7bf;
      --ring:#7cb3ff; --accent:#b49cff;
      --danger:#fca5a5;
      --radius:12px; --shadow:0 8px 20px rgba(0,0,0,.30);
      --ringGlow:0 0 0 4px rgba(124,179,255,.18);
      --grid:clamp(300px, 48vw, 620px);
    }
    body{
      margin:0;
      background: linear-gradient(180deg, var(--bg1), var(--bg2));
      color:var(--text);
      font-synthesis-weight:none;
    }
    .auth-wrap{max-width:980px;margin:2rem auto;padding:0 1rem;}
    .shell{
      display:grid;grid-template-columns:1fr var(--grid);gap:20px;align-items:start;
    }
    @media (max-width:980px){ .shell{grid-template-columns:1fr} .visual{order:2} .panel{order:1} }

    /* Left visual kept very simple */
    .visual{
      border:1px solid var(--border);
      border-radius:var(--radius);
      background:#0f1728;
      padding:1rem;
      box-shadow:var(--shadow);
    }
    .brand{display:flex;align-items:center;gap:.6rem;padding:.25rem 0 .75rem}
    .logo{
      inline-size:28px; block-size:28px; border-radius:8px;
      background:#2a3a58; border:1px solid var(--border);
    }
    .brand h1{font-size:1rem;margin:0;color:#dbe7ff;font-weight:800;letter-spacing:.2px}
    .visual-copy{padding:.5rem 0}
    .kicker{
      display:inline-flex;align-items:center;gap:.5rem;
      font-size:.78rem;color:var(--muted);
      background:#0d1627; border:1px solid var(--border);
      padding:.3rem .55rem; border-radius:999px;
    }
    .kicker .dot{width:6px;height:6px;border-radius:50%;background:#34d399}
    .visual h2{margin:.7rem 0 .4rem; font-size:1.4rem; line-height:1.25}
    .visual p{color:#c8d2ea; margin:0}
    .badges{display:flex;flex-wrap:wrap;gap:.5rem;margin-top:.75rem}
    .badge{
      padding:.28rem .5rem; border:1px solid var(--border);
      border-radius:999px; font-size:.72rem; color:#cfd8ee; background:#0d1627;
    }
    .hintline{display:flex;align-items:center;gap:.5rem;margin-top:.9rem;color:var(--muted);font-size:.9rem}
    .hintline svg{opacity:.8}

    /* Right panel */
    .panel{display:flex;flex-direction:column;gap:14px}
    .hero{padding:.25rem 0}
    .hero h2{margin:.1rem 0 .25rem;font-size:1.4rem}
    .hero p{margin:0;color:var(--muted);font-size:.95rem}
    .status{
      display:inline-flex;align-items:center;gap:.5rem;
      padding:.35rem .6rem;border-radius:999px;border:1px solid var(--border);
      background:#0d1627;font-size:.82rem;color:#bfdbfe
    }
    .status .pill{width:8px;height:8px;border-radius:50%;background:#f59e0b}

    .grid{display:grid;grid-template-columns:1fr;gap:12px}
    @media (min-width:560px){ .grid{grid-template-columns:1fr 1fr} }

    /* Cards & inputs */
    .form-card{
      background:#0f1728;
      border:1px solid var(--border);
      border-radius:var(--radius);
      box-shadow:var(--shadow);
      padding:1rem;
    }
    .form-card h3{margin:0 0 .7rem;font-size:1rem}
    .divider{height:1px;background:#1b2537;margin:.5rem 0 .25rem}

    label{display:block;margin:.55rem 0 .3rem;font-weight:700;font-size:.9rem;color:#dfe7fb}
    .field{position:relative}
    input[type="email"],input[type="password"]{
      width:100%;padding:.7rem .9rem;border-radius:10px;border:1px solid var(--border);
      background:#0b1426;color:var(--text);transition:border-color .15s, box-shadow .15s;
    }
    input::placeholder{color:#90a0be}
    input:focus{border-color:var(--ring);outline:none; box-shadow:var(--ringGlow)}

    .btn{
      margin-top:.8rem;width:100%;padding:.8rem 1rem;border-radius:10px;
      border:1px solid rgba(124,179,255,.45);
      background:linear-gradient(135deg, rgba(124,179,255,.16), rgba(180,156,255,.14));
      color:var(--text);font-weight:800;cursor:pointer;letter-spacing:.2px;
      transition:filter .15s ease, transform .05s ease;
    }
    .btn:hover{ filter:brightness(1.06) }
    .btn:active{ transform: translateY(1px) }

    .form-hint{display:flex;align-items:center;gap:.5rem;color:var(--muted);font-size:.88rem;margin-top:.55rem}
    .hint{color:var(--muted);font-size:.92rem;margin-top:.7rem;text-align:center}

  .auth-wrap
    .shell
      .visual
        .brand
          .logo
          h1 TaskBoard
        .visual-copy
          span.kicker
            span.dot
            | Secure workspace access
          h2 Simple sign-in to access your tasks
          p Keep work organized with a lightweight board and clear views.
          .badges
            span.badge Email-based sign-in
            span.badge JWT cookie
            span.badge Mobile friendly
          .hintline
            svg(width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round")
              path(d="M12 20h9")
              path(d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4 12.5-12.5z")
            span Your email is used only for sign-in and notices.

      .panel
        .hero
          h2 Auth Portal
          if user
            p
              | Welcome back,
              | &nbsp;
              span.status
                span.pill
                | #{user.email}
          else
            p Sign up or log in to access your task board.

        if !user
          .grid
            .form-card
              h3 Create an account
              .divider
              form#signupForm
                label(for='suEmail') Email
                .field
                  input#suEmail(type='email' placeholder='you@example.com' required)
                label(for='suPassword') Password
                .field
                  input#suPassword(type='password' placeholder='••••••••' required)
                button.btn(type='submit') Create account
                .form-hint
                  svg(width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round")
                    path(d="M20 6L9 17l-5-5")
                  span Passwords are hashed. Plain text is never stored.
            .form-card
              h3 Welcome back
              .divider
              form#loginForm
                label(for='liEmail') Email
                .field
                  input#liEmail(type='email' placeholder='you@example.com' required)
                label(for='liPassword') Password
                .field
                  input#liPassword(type='password' placeholder='••••••••' required)
                button.btn(type='submit') Log in
                .form-hint
                  svg(width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round")
                    circle(cx="12" cy="12" r="10")
                    path(d="M12 16v-4")
                    path(d="M12 8h.01")
                  span Trouble logging in? Contact your admin.

          p.hint After sign-up or login, you’ll be taken to the Task Board.

        else
          .form-card
            h3 You are logged in
            .divider
            form(action="/users/logout" method="post")
              button.btn(type="submit") Log out
          p.hint Click logout to return to login/signup.

  if !user
    //- JS (show-password functionality removed)
    script.
      (function () {
        const signupForm = document.getElementById('signupForm');
        const loginForm = document.getElementById('loginForm');

        signupForm.onsubmit = async (e) => {
          e.preventDefault();
          const email = document.getElementById('suEmail').value.trim();
          const password = document.getElementById('suPassword').value;
          const res = await fetch('/users/signup', {
            method:'POST', headers:{'Content-Type':'application/json'},
            body: JSON.stringify({ email, password })
          });
          const data = await res.json();
          if (!res.ok) return alert(data.error || 'Sign up failed');
          alert('Signed up as ' + data.user.email);
          window.location.href = '/board';
        };

        loginForm.onsubmit = async (e) => {
          e.preventDefault();
          const email = document.getElementById('liEmail').value.trim();
          const password = document.getElementById('liPassword').value;
          const res = await fetch('/users/login', {
            method:'POST', headers:{'Content-Type':'application/json'},
            body: JSON.stringify({ email, password })
          });
          const data = await res.json();
          if (!res.ok) return alert(data.error || 'Login failed');
          alert('Logged in as ' + data.user.email);
          window.location.href = '/board';
        };
      })();
