//- views/board.jade
extends layout

block content
  //- Inline CSS for a beautiful board UI
  style.
    :root{
      --bg1:#0f172a; --bg2:#0b1222; --glass:rgba(255,255,255,.06); --border:rgba(255,255,255,.14);
      --text:#e5e7eb; --muted:#94a3b8; --blue:#60a5fa; --violet:#a78bfa; --green:#34d399; --red:#f87171; --amber:#f59e0b;
      --shadow:0 16px 40px rgba(0,0,0,.45); --radius:16px;
    }
    body{
      background:
        radial-gradient(1200px 800px at 12% 8%, #0b1222 0%, transparent 60%),
        radial-gradient(1200px 800px at 88% 12%, #141e36 0%, transparent 60%),
        linear-gradient(180deg, var(--bg1), var(--bg2));
      color:var(--text);
    }
    .wrap{max-width:1200px;margin:2rem auto;padding:0 1rem;}
    .card{
      background:linear-gradient(180deg, rgba(255,255,255,.07), rgba(255,255,255,.045));
      border:1px solid var(--border); border-radius:var(--radius);
      box-shadow:var(--shadow); padding:1.25rem; backdrop-filter:blur(10px);
      margin-bottom:1rem;
    }
    h2{margin:0 0 .75rem; font-size:clamp(1.3rem,2.8vw,1.7rem)}
    label{display:block; margin:.6rem 0 .35rem; font-weight:600}
    input, select, textarea, button{
      width:100%; padding:.75rem 1rem; border-radius:12px; border:1px solid var(--border);
      background:rgba(255,255,255,.04); color:var(--text); outline:none;
      transition:border-color .15s ease, box-shadow .15s ease, transform .08s ease;
    }
    input:focus, select:focus, textarea:focus{
      border-color:rgba(96,165,250,.7); box-shadow:0 0 0 4px rgba(96,165,250,.18)
    }
    textarea{min-height:96px; resize:vertical}
    .row{display:flex; gap:16px; flex-wrap:wrap}
    .col{flex:1 1 320px; min-width:280px}
    .btn{
      border:1px solid rgba(96,165,250,.45);
      background:linear-gradient(135deg, rgba(96,165,250,.25), rgba(167,139,250,.22));
      font-weight:700; cursor:pointer;
    }
    .btn:hover{transform:translateY(-1px); background:linear-gradient(135deg, rgba(96,165,250,.35), rgba(167,139,250,.3))}
    .btn-ghost{
      background:rgba(255,255,255,.04); border:1px dashed var(--border); font-weight:600;
    }
    .btn-ghost:hover{border-color:rgba(52,211,153,.55)}
    .small{color:var(--muted); font-size:.92rem}
    /* Board grid */
    .board{display:grid; grid-template-columns:repeat(4, 1fr); gap:18px; margin-top:.5rem}
    @media (max-width:1100px){.board{grid-template-columns:repeat(2, 1fr)}}
    @media (max-width:720px){.board{grid-template-columns:1fr}}
    .column{
      background:linear-gradient(180deg, rgba(255,255,255,.05), rgba(255,255,255,.035));
      border:1px solid var(--border); border-radius:14px; padding:10px 10px 12px; min-height:160px;
    }
    .column h3{margin:6px 8px 8px; font-size:1rem; font-weight:800; letter-spacing:.02em; color:#e2e8f0}
    .taskCol{list-style:none; padding:8px; margin:0; display:flex; flex-direction:column; gap:10px}
    /* Task card */
    .task{
      border:1px solid var(--border); border-radius:12px; background:rgba(255,255,255,.045);
      padding:.8rem .9rem; transition:transform .12s ease, box-shadow .12s ease, border-color .12s ease;
    }
    .task:hover{transform:translateY(-2px); box-shadow:0 10px 26px rgba(0,0,0,.35); border-color:rgba(167,139,250,.45)}
    .task .title{font-weight:800; letter-spacing:.015em; margin-bottom:2px}
    .task .meta{color:var(--muted); font-size:.9rem; margin-top:4px}
    .badge{display:inline-block; padding:.25rem .55rem; border-radius:999px; font-size:.75rem; margin-left:6px; font-weight:700}
    .badge.ontrack{background:rgba(52,211,153,.18); border:1px solid rgba(52,211,153,.55); color:#10b981}
    .badge.atrisk{background:rgba(245,158,11,.18); border:1px solid rgba(245,158,11,.55); color:#f59e0b}
    .badge.overdue{background:rgba(248,113,113,.18); border:1px solid rgba(248,113,113,.55); color:#f87171}
    .actions{margin-top:.6rem; display:flex; gap:8px; flex-wrap:wrap}
    .actions select{flex:0 1 180px}
    .toolbar{display:flex; gap:10px; align-items:center; margin:.5rem 0 0}
    .toolbar .btn{width:auto; padding:.6rem .9rem}

  .wrap
    section.card
      h2 Create Task
      form#taskForm
        .row
          .col
            label(for='tTitle') Title
            input#tTitle(type='text' placeholder='Short title' required)
            label(for='tPriority') Priority
            select#tPriority
              option(value='Low') Low
              option(value='Medium' selected) Medium
              option(value='High') High
          .col
            label(for='tAssignee') Assignee (user id)
            input#tAssignee(type='number' placeholder='e.g., 1')
            label(for='tDue') Due Date/Time
            input#tDue(type='datetime-local')
        label(for='tDesc') Description
        textarea#tDesc(placeholder='A few details…')
        button.btn(type='submit') Create

    section.card
      h2 Filters
      .row
        .col
          label(for='fAssignee') Assignee (user id)
          input#fAssignee(type='number' placeholder='e.g., 1')
        .col
          label(for='fPriority') Priority
          select#fPriority
            option(value='') (any)
            option(value='Low') Low
            option(value='Medium') Medium
            option(value='High') High
      .toolbar
        button.btn#applyFilters Apply Filters
        button.btn-ghost#clearFilters(type='button') Clear

    section.card
      h2 Board
      p.small Click “Refresh” to reload tasks; use Change Status / Add Comment on each card.
      .toolbar
        button.btn#refreshTasks Refresh
        a.btn(href="/tasks/view" style="text-decoration:none;") Open Task Viewer →
      .board
        .column
          h3 Backlog
          ul#colBacklog.taskCol
        .column
          h3 In Progress
          ul#colInProgress.taskCol
        .column
          h3 Review
          ul#colReview.taskCol
        .column
          h3 Done
          ul#colDone.taskCol

  //- Inline client JS (unchanged logic, prettier UI)
  script.
    (function(){
      const taskForm = document.getElementById('taskForm');
      const refreshBtn = document.getElementById('refreshTasks');
      const applyFiltersBtn = document.getElementById('applyFilters');
      const clearFiltersBtn = document.getElementById('clearFilters');
      const fAssignee = document.getElementById('fAssignee');
      const fPriority = document.getElementById('fPriority');

      const cols = {
        'Backlog': document.getElementById('colBacklog'),
        'In Progress': document.getElementById('colInProgress'),
        'Review': document.getElementById('colReview'),
        'Done': document.getElementById('colDone')
      };

      let JWT = localStorage.getItem('token') || '';
      function authHeaders(){ return JWT ? { Authorization:'Bearer '+JWT } : {}; }
      function toISOLocal(dt){ if(!dt) return null; const d=new Date(dt); return isNaN(d)?null:d.toISOString(); }
      function el(tag, attrs={}, children=[]){
        const e=document.createElement(tag);
        Object.entries(attrs).forEach(([k,v])=>{ k==='class'? e.className=v : e.setAttribute(k,v); });
        (Array.isArray(children)?children:[children]).forEach(c=>{ if(c==null) return; typeof c==='string'? e.appendChild(document.createTextNode(c)) : e.appendChild(c); });
        return e;
      }
      function clearBoard(){ Object.values(cols).forEach(ul=>ul.innerHTML=''); }
      function emptyState(ul){
        const d=el('div',{class:'small'},'No tasks here yet.');
        ul.appendChild(d);
      }
      function renderTaskItem(t){
        const li=el('li',{class:'task'});
        li.appendChild(el('div',{class:'title'}, t.title+' '));
        li.appendChild(el('span',{class:'badge '+t.statusBadge.replace(' ','').toLowerCase()}, t.statusBadge));
        li.appendChild(el('div',{class:'meta'}, `P:${t.priority} · Assignee:${t.assigneeId ?? '-'} · Due:${t.dueDate ? new Date(t.dueDate).toLocaleString() : '-'}`));

        const sel=el('select');
        ['Backlog','In Progress','Review','Done'].forEach(s=>{
          const opt=el('option',{value:s},s); if(s===t.status) opt.selected=true; sel.appendChild(opt);
        });
        const moveBtn=el('button',{class:'btn'},'Change Status');
        moveBtn.onclick=async()=>{
          const res=await fetch(`/tasks/${t.id}`,{
            method:'PATCH', headers:{'Content-Type':'application/json',...authHeaders()},
            body: JSON.stringify({ status: sel.value })
          });
          if(!res.ok) return alert('Failed to move');
          loadTasks();
        };

        const cInp=el('input',{type:'text',placeholder:'Add comment…'});
        const cBtn=el('button',{class:'btn-ghost'},'Add Comment');
        cBtn.onclick=async()=>{
          if(!cInp.value.trim()) return;
          const res=await fetch(`/tasks/${t.id}/comments`,{
            method:'POST', headers:{'Content-Type':'application/json',...authHeaders()},
            body: JSON.stringify({ body: cInp.value.trim() })
          });
          if(!res.ok) return alert('Failed to comment');
          cInp.value=''; alert('Comment added');
        };

        li.appendChild(el('div',{class:'actions'},[sel,moveBtn,cInp,cBtn]));
        return li;
      }
      async function loadTasks(){
        //- if(!JWT) return alert('Log in first (see /auth)');
        const params=new URLSearchParams();
        if(fAssignee.value) params.set('assigneeId', String(fAssignee.value));
        if(fPriority.value) params.set('priority', fPriority.value);
        const res=await fetch('/tasks?'+params.toString(),{ headers: authHeaders() });
        if(!res.ok) return alert('Failed to load tasks');
        const data=await res.json();
        clearBoard();
        const buckets={'Backlog':[], 'In Progress':[], 'Review':[], 'Done':[]};
        (data.tasks||[]).forEach(t=> buckets[t.status]?.push(t));
        Object.entries(buckets).forEach(([status, arr])=>{
          const ul=cols[status];
          if(!arr.length) return emptyState(ul);
          arr.forEach(t=> (ul.appendChild(renderTaskItem(t))));
        });
      }

      taskForm.onsubmit=async(e)=>{
        e.preventDefault();
        if(!JWT) return alert('Log in first (see /auth)');
        const payload={
          title: document.getElementById('tTitle').value.trim(),
          description: document.getElementById('tDesc').value,
          priority: document.getElementById('tPriority').value,
          assigneeId: document.getElementById('tAssignee').value ? Number(document.getElementById('tAssignee').value) : null,
          dueDate: toISOLocal(document.getElementById('tDue').value)
        };
        const res=await fetch('/tasks',{
          method:'POST', headers:{'Content-Type':'application/json',...authHeaders()},
          body: JSON.stringify(payload)
        });
        const data=await res.json();
        if(!res.ok) return alert(data.error || 'Create failed');
        e.target.reset();
        loadTasks();
      };

      refreshBtn.onclick=loadTasks;
      applyFiltersBtn.onclick=loadTasks;
      clearFiltersBtn.onclick=()=>{ fAssignee.value=''; fPriority.value=''; loadTasks(); };

      if(JWT) loadTasks();
    })();
