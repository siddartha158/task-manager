//- views/board.jade
extends layout

block content
  //- Simple, readable UI theme (design-only changes)
  style.
    :root{
      --bg: #f0fdf4;
      --panel: #ffffff;
      --panel-soft: #f0fdf4;
      --line: #d1fae5;
      --text: #1f2937;
      --muted: #6b7280;
      --brand: #059669;
      --brand-hover: #047857;
      --ok: #10b981;
      --warn: #f59e0b;
      --bad: #dc3545;
      --radius: 8px;
      --shadow: 0 2px 8px rgba(5, 150, 105, 0.1);
      --focus: 0 0 0 3px rgba(5, 150, 105, 0.25);
    }
    
    body{
      background: var(--bg);
      color: var(--text);
      margin: 0;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      line-height: 1.5;
    }
    
    .wrap{
      max-width: 1200px;
      margin: 1.5rem auto;
      padding: 0 1rem;
    }
    
    .header{
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      padding-bottom: 1rem;
      border-bottom: 2px solid var(--line);
    }
    
    .brand{
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .brand .dot{
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background: var(--brand);
    }
    
    .brand h1{
      margin: 0;
      font-size: 1.5rem;
      font-weight: 600;
      color: var(--text);
    }
    
    .card{
      background: var(--panel);
      border: 1px solid var(--line);
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
    }
    
    h2{
      margin: 0 0 1rem 0;
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text);
    }
    
    label{
      display: block;
      margin: 1rem 0 0.25rem 0;
      font-weight: 500;
      color: var(--text);
      font-size: 0.9rem;
    }
    
    input, select, textarea, button{
      width: 100%;
      padding: 0.75rem;
      border-radius: var(--radius);
      border: 1px solid var(--line);
      background: var(--panel);
      color: var(--text);
      outline: none;
      transition: border-color 0.2s ease, box-shadow 0.2s ease, transform 0.1s ease;
      font-size: 1rem;
      box-sizing: border-box;
    }
    
    input::placeholder, textarea::placeholder{
      color: var(--muted);
    }
    
    input:focus, select:focus, textarea:focus{
      border-color: var(--brand);
      box-shadow: var(--focus);
    }
    
    textarea{
      min-height: 100px;
      resize: vertical;
    }

    .row{
      display: flex;
      gap: 1rem;
      flex-wrap: wrap;
    }
    
    .col{
      flex: 1 1 300px;
      min-width: 250px;
    }
    
    .small{
      color: var(--muted);
      font-size: 0.9rem;
    }

    /* Buttons */
    .btn{
      border: 1px solid var(--brand);
      background: var(--brand);
      color: white;
      font-weight: 500;
      cursor: pointer;
      transition: background-color 0.2s ease, transform 0.1s ease;
      text-decoration: none;
      display: inline-block;
      text-align: center;
    }
    
    .btn:hover{
      background: var(--brand-hover);
      border-color: var(--brand-hover);
    }
    
    .btn:active{
      transform: translateY(1px);
    }
    
    .btn-ghost{
      background: transparent;
      border: 1px solid var(--line);
      color: var(--text);
      font-weight: 500;
    }
    
    .btn-ghost:hover{
      background: #ecfdf5;
      border-color: var(--brand);
      color: var(--brand);
    }

    /* Filter toolbar */
    .toolbar{
      display: flex;
      gap: 0.75rem;
      align-items: center;
      margin: 1rem 0 0 0;
      flex-wrap: wrap;
    }
    
    .toolbar .btn{
      width: auto;
      padding: 0.5rem 1rem;
    }

    /* Board grid */
    .board{
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 1rem;
      margin-top: 1rem;
    }
    
    @media (max-width: 1100px){
      .board{
        grid-template-columns: repeat(2, 1fr);
      }
    }
    
    @media (max-width: 720px){
      .board{
        grid-template-columns: 1fr;
      }
    }

    .column{
      background: var(--panel-soft);
      border: 1px solid var(--line);
      border-radius: var(--radius);
      padding: 1rem;
      min-height: 200px;
    }
    
    .column h3{
      margin: 0 0 1rem 0;
      font-size: 1rem;
      font-weight: 600;
      color: var(--text);
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--line);
    }
    
    .taskCol{
      list-style: none;
      padding: 0;
      margin: 0;
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }

    /* Task card */
    .task{
      border: 1px solid var(--line);
      border-radius: var(--radius);
      background: var(--panel);
      padding: 1rem;
      transition: transform 0.2s ease, box-shadow 0.2s ease, border-color 0.2s ease;
    }
    
    .task:hover{
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(5, 150, 105, 0.15);
      border-color: var(--brand);
    }
    
    .task .title{
      font-weight: 600;
      margin-bottom: 0.5rem;
      color: var(--text);
    }
    
    .task .meta{
      color: var(--muted);
      font-size: 0.85rem;
      margin-top: 0.5rem;
    }

    .badge{
      display: inline-block;
      padding: 0.25rem 0.5rem;
      border-radius: 12px;
      font-size: 0.75rem;
      margin-left: 0.5rem;
      font-weight: 500;
    }
    
    .badge.ontrack{
      background: #ecfdf5;
      border: 1px solid #a7f3d0;
      color: #065f46;
    }
    
    .badge.atrisk{
      background: #fffbeb;
      border: 1px solid #fde68a;
      color: #92400e;
    }
    
    .badge.overdue{
      background: #fef2f2;
      border: 1px solid #fecaca;
      color: #991b1b;
    }

    .actions{
      margin-top: 1rem;
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
    }
    
    .actions select{
      flex: 0 1 150px;
    }
    
    .actions button{
      flex: 0 0 auto;
      width: auto;
      padding: 0.5rem 0.75rem;
      font-size: 0.875rem;
    }
    
    .actions input{
      flex: 1 1 200px;
      min-width: 150px;
    }

  .wrap
    .header
      .brand
        .dot
        h1 Task Board
      

    section.card
      h2 Create Task
      form#taskForm
        .row
          .col
            label(for='tTitle') Title
            input#tTitle(type='text' placeholder='Short title' required)
            label(for='tPriority') Priority
            select#tPriority
              option(value='Low') Low
              option(value='Medium' selected) Medium
              option(value='High') High
          .col
            label(for='tAssignee') Assignee (user id)
            input#tAssignee(type='number' placeholder='e.g., 1')
            label(for='tDue') Due Date/Time
            input#tDue(type='datetime-local')
        label(for='tDesc') Description
        textarea#tDesc(placeholder='A few details…')
        button.btn(type='submit') Create

    section.card
      h2 Filters
      .row
        .col
          label(for='fAssignee') Assignee (user id)
          input#fAssignee(type='number' placeholder='e.g., 1')
        .col
          label(for='fPriority') Priority
          select#fPriority
            option(value='') (any)
            option(value='Low') Low
            option(value='Medium') Medium
            option(value='High') High
      .toolbar
        button.btn#applyFilters Apply Filters
        button.btn-ghost#clearFilters(type='button') Clear

    section.card
      h2 Board
      p.small Click "Refresh" to reload tasks; use Change Status / Add Comment on each card.
      .toolbar
        button.btn#refreshTasks Refresh
      
      .board
        .column
          h3 Backlog
          ul#colBacklog.taskCol
        .column
          h3 In Progress
          ul#colInProgress.taskCol
        .column
          h3 Review
          ul#colReview.taskCol
        .column
          h3 Done
          ul#colDone.taskCol

  //- Client JS (unchanged; design-only request)
  script.
    (function(){
      const taskForm = document.getElementById('taskForm');
      const refreshBtn = document.getElementById('refreshTasks');
      const applyFiltersBtn = document.getElementById('applyFilters');
      const clearFiltersBtn = document.getElementById('clearFilters');
      const fAssignee = document.getElementById('fAssignee');
      const fPriority = document.getElementById('fPriority');

      const cols = {
        'Backlog': document.getElementById('colBacklog'),
        'In Progress': document.getElementById('colInProgress'),
        'Review': document.getElementById('colReview'),
        'Done': document.getElementById('colDone')
      };

      let JWT = localStorage.getItem('token') || '';
      function authHeaders(){ return JWT ? { Authorization:'Bearer '+JWT } : {}; }
      function toISOLocal(dt){ if(!dt) return null; const d=new Date(dt); return isNaN(d)?null:d.toISOString(); }
      function el(tag, attrs={}, children=[]){
        const e=document.createElement(tag);
        Object.entries(attrs).forEach(([k,v])=>{ k==='class'? e.className=v : e.setAttribute(k,v); });
        (Array.isArray(children)?children:[children]).forEach(c=>{ if(c==null) return; typeof c==='string'? e.appendChild(document.createTextNode(c)) : e.appendChild(c); });
        return e;
      }
      function clearBoard(){ Object.values(cols).forEach(ul=>ul.innerHTML=''); }
      function emptyState(ul){
        const d=el('div',{class:'small'},'No tasks here yet.');
        ul.appendChild(d);
      }
      function renderTaskItem(t){
        const li=el('li',{class:'task'});
        li.appendChild(el('div',{class:'title'}, t.title+' '));
        li.appendChild(el('span',{class:'badge '+t.statusBadge.replace(' ','').toLowerCase()}, t.statusBadge));
        li.appendChild(el('div',{class:'meta'}, `P:${t.priority} · Assignee:${t.assigneeId ?? '-'} · Due:${t.dueDate ? new Date(t.dueDate).toLocaleString() : '-'}`));

        const sel=el('select');
        ['Backlog','In Progress','Review','Done'].forEach(s=>{
          const opt=el('option',{value:s},s); if(s===t.status) opt.selected=true; sel.appendChild(opt);
        });
        const moveBtn=el('button',{class:'btn'},'Change Status');
        moveBtn.onclick=async()=>{
          const res=await fetch(`/tasks/${t.id}`,{
            method:'PATCH', headers:{'Content-Type':'application/json',...authHeaders()},
            body: JSON.stringify({ status: sel.value })
          });
          if(!res.ok) return alert('Failed to move');
          loadTasks();
        };

        const cInp=el('input',{type:'text',placeholder:'Add comment…'});
        const cBtn=el('button',{class:'btn-ghost'},'Add Comment');
        cBtn.onclick=async()=>{
          if(!cInp.value.trim()) return;
          const res=await fetch(`/tasks/${t.id}/comments`,{
            method:'POST', headers:{'Content-Type':'application/json',...authHeaders()},
            body: JSON.stringify({ body: cInp.value.trim() })
          });
          if(!res.ok) return alert('Failed to comment');
          cInp.value=''; alert('Comment added');
        };

        li.appendChild(el('div',{class:'actions'},[sel,moveBtn,cInp,cBtn]));
        return li;
      }
      async function loadTasks(){
        const params=new URLSearchParams();
        if(fAssignee.value) params.set('assigneeId', String(fAssignee.value));
        if(fPriority.value) params.set('priority', fPriority.value);
        const res=await fetch('/tasks?'+params.toString(),{ headers: authHeaders() });
        if(!res.ok) return alert('Failed to load tasks');
        const data=await res.json();
        clearBoard();
        const buckets={'Backlog':[], 'In Progress':[], 'Review':[], 'Done':[]};
        (data.tasks||[]).forEach(t=> buckets[t.status]?.push(t));
        Object.entries(buckets).forEach(([status, arr])=>{
          const ul=cols[status];
          if(!arr.length) return emptyState(ul);
          arr.forEach(t=> (ul.appendChild(renderTaskItem(t))));
        });
      }

      taskForm.onsubmit=async(e)=>{
        e.preventDefault();
        const payload={
          title: document.getElementById('tTitle').value.trim(),
          description: document.getElementById('tDesc').value,
          priority: document.getElementById('tPriority').value,
          assigneeId: document.getElementById('tAssignee').value ? Number(document.getElementById('tAssignee').value) : null,
          dueDate: toISOLocal(document.getElementById('tDue').value)
        };
        const res=await fetch('/tasks',{
          method:'POST', headers:{'Content-Type':'application/json',...authHeaders()},
          body: JSON.stringify(payload)
        });
        const data=await res.json();
        if(!res.ok) return alert(data.error || 'Create failed');
        e.target.reset();
        loadTasks();
      };

      refreshBtn.onclick=loadTasks;
      applyFiltersBtn.onclick=loadTasks;
      clearFiltersBtn.onclick=()=>{ fAssignee.value=''; fPriority.value=''; loadTasks(); };

      if(JWT) loadTasks();
    })();
