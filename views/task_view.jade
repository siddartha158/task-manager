//- views/task_view.jade
extends layout

block content
  //- Clean, readable theme (design-only changes)
  style.
    :root{
      /* simple, clean palette */
      --bg: #f0fdf4;
      --panel: #ffffff;
      --panel-2: #f0fdf4;
      --line: #d1fae5;
      --text: #1f2937;
      --muted: #6b7280;
      --brand: #059669;
      --brand-2: #06b6d4;
      --ok: #10b981;
      --warn: #f59e0b;
      --bad: #dc3545;
      --radius: 8px;
      --shadow: 0 2px 8px rgba(5, 150, 105, 0.1);
      --focus: 0 0 0 3px rgba(5, 150, 105, 0.25);
    }
    
    body{
      background: var(--bg);
      color: var(--text);
      margin: 0;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      line-height: 1.5;
    }
    
    .wrap{
      max-width: 900px;
      margin: 1.5rem auto;
      padding: 0 1rem;
    }
    
    .pagehead{
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 1.5rem;
      padding-bottom: 1rem;
      border-bottom: 2px solid var(--line);
    }
    
    .brand{
      display: flex;
      align-items: center;
      gap: 0.75rem;
      font-weight: 600;
      color: var(--text);
    }
    
    .brand .dot{
      width: 12px;
      height: 12px;
      border-radius: 50%;
      background: var(--brand);
    }
    
    .brand small{
      color: var(--muted);
      font-weight: 400;
    }
    
    .card{
      background: var(--panel);
      border: 1px solid var(--line);
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
    }
    
    h2{
      margin: 0 0 1rem 0;
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text);
    }
    
    label{
      display: block;
      margin: 1rem 0 0.25rem 0;
      font-weight: 500;
      color: var(--text);
      font-size: 0.9rem;
    }

    /* inputs & buttons */
    input, button{
      width: 100%;
      padding: 0.75rem;
      border-radius: var(--radius);
      border: 1px solid var(--line);
      background: var(--panel);
      color: var(--text);
      outline: none;
      transition: border-color 0.2s ease, box-shadow 0.2s ease, transform 0.1s ease;
      font-size: 1rem;
      box-sizing: border-box;
    }
    
    input::placeholder{
      color: var(--muted);
    }
    
    input:focus{
      border-color: var(--brand);
      box-shadow: var(--focus);
    }
    
    .row{
      display: flex;
      gap: 1rem;
      flex-wrap: wrap;
    }
    
    .col{
      flex: 1 1 200px;
      min-width: 200px;
    }
    
    .btn{
      border: 1px solid var(--brand);
      background: var(--brand);
      color: white;
      font-weight: 500;
      cursor: pointer;
      transition: background-color 0.2s ease, transform 0.1s ease;
      text-decoration: none;
      display: inline-block;
      text-align: center;
    }
    
    .btn:hover{
      background: #047857;
      border-color: #047857;
    }
    
    .btn:active{
      transform: translateY(1px);
    }
    
    .toolbar{
      display: flex;
      gap: 0.75rem;
      align-items: center;
      margin-top: 1rem;
      flex-wrap: wrap;
    }
    
    .toolbar .btn{
      width: auto;
      padding: 0.5rem 1rem;
    }
    
    .small{
      color: var(--muted);
      font-size: 0.9rem;
    }

    /* Auth notice */
    .auth-notice{
      background: #fffbeb;
      border: 1px solid #fde68a;
      border-radius: var(--radius);
      padding: 1rem;
      margin-bottom: 1.5rem;
      text-align: center;
      color: #92400e;
    }
    
    .auth-notice .btn{
      margin-top: 0.5rem;
      width: auto;
      padding: 0.5rem 1rem;
    }

    /* Viewer pieces */
    .task-card{
      display: grid;
      grid-template-columns: 1fr;
      gap: 1rem;
      margin-top: 1rem;
    }
    
    .heading{
      display: flex;
      align-items: center;
      gap: 1rem;
      flex-wrap: wrap;
    }
    
    .title{
      font-weight: 600;
      font-size: 1.5rem;
      color: var(--text);
    }
    
    .badge{
      display: inline-block;
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      font-size: 0.75rem;
      font-weight: 500;
    }
    
    .badge.ontrack{
      background: #ecfdf5;
      border: 1px solid #a7f3d0;
      color: #065f46;
    }
    
    .badge.atrisk{
      background: #fffbeb;
      border: 1px solid #fde68a;
      color: #92400e;
    }
    
    .badge.overdue{
      background: #fef2f2;
      border: 1px solid #fecaca;
      color: #991b1b;
    }

    .kv{
      display: grid;
      grid-template-columns: repeat(2, minmax(0, 1fr));
      gap: 1rem;
    }
    
    @media (max-width: 640px){
      .kv{
        grid-template-columns: 1fr;
      }
    }
    
    .item{
      background: var(--panel-2);
      border: 1px solid var(--line);
      border-radius: var(--radius);
      padding: 1rem;
    }
    
    .item .label{
      color: var(--muted);
      font-size: 0.85rem;
      font-weight: 500;
    }
    
    .item .value{
      font-weight: 600;
      margin-top: 0.25rem;
      color: var(--text);
    }
    
    .desc{
      background: var(--panel-2);
      border: 1px solid var(--line);
      border-radius: var(--radius);
      padding: 1rem;
    }
    
    .desc strong{
      color: var(--text);
    }

    /* Comments */
    .comments{
      margin-top: 1rem;
    }
    
    .comments h3{
      margin: 0 0 1rem 0;
      font-size: 1.1rem;
      font-weight: 600;
      color: var(--text);
    }
    
    .comment{
      border: 1px solid var(--line);
      border-radius: var(--radius);
      padding: 1rem;
      background: var(--panel);
    }
    
    .comment + .comment{
      margin-top: 0.75rem;
    }
    
    .comment .meta{
      color: var(--muted);
      font-size: 0.85rem;
      margin-bottom: 0.5rem;
    }

    /* States & debug */
    .empty{
      color: var(--muted);
      padding: 1rem 0;
      text-align: center;
    }
    
    .error{
      color: var(--bad);
      padding: 1rem 0;
      text-align: center;
    }
    
    pre.json{
      background: #f0fdf4;
      color: var(--text);
      border: 1px solid var(--line);
      border-radius: var(--radius);
      padding: 1rem;
      overflow: auto;
      font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
      font-size: 0.875rem;
    }
    
    details{
      cursor: pointer;
    }
    
    summary{
      cursor: pointer;
      padding: 0.5rem 0;
      font-weight: 500;
      color: var(--text);
    }
    
    summary:hover{
      color: var(--brand);
    }

  .wrap
    .pagehead
      .brand
        .dot
        span Task Viewer
        small · Quick lookup by ID
      a.small(href="/board" style="text-decoration:none; color: var(--brand);") ← Back to Board

    #authNotice.auth-notice(style="display:none;")
      p You need to be logged in to view task details.
      a.btn(href="/auth") Go to Login →

    section.card#mainContent
      h2 Task Details (by ID)
      form#detailForm
        .row
          .col
            label(for='dId') Task ID
            input#dId(type='number' min='1' placeholder='e.g., 1' required)
          .col
            label &nbsp;
            button.btn(type='submit') Load Details
      .toolbar
        button.btn#copyJson(type='button') Copy JSON
        a.btn(href="/board" style="text-decoration:none") Open Board →

    section.card#taskHolder
      p.small.empty No task loaded yet. Enter an ID and click "Load Details".

    //- Optional raw JSON (collapsed unless needed)
    details(class="card" style="margin-top:1rem")
      summary(style="cursor:pointer") Raw JSON (debug)
      pre.json#detailOut (details will appear here)

  // Inline JS with auth check
  script.
    (function(){
      const dForm = document.getElementById('detailForm');
      const dId = document.getElementById('dId');
      const dOut = document.getElementById('detailOut');
      const holder = document.getElementById('taskHolder');
      const copyBtn = document.getElementById('copyJson');
      const authNotice = document.getElementById('authNotice');
      const mainContent = document.getElementById('mainContent');

      let JWT = localStorage.getItem('token') || '';
      
      // Check authentication on page load
      function checkAuth(){
        if(!JWT){
          authNotice.style.display = 'block';
          mainContent.style.display = 'none';
          return false;
        }
        authNotice.style.display = 'none';
        mainContent.style.display = 'block';
        return true;
      }

      function authHeaders(){ return JWT ? { Authorization:'Bearer '+JWT } : {}; }
      function clearHolder(){
        holder.innerHTML = '<p class="small empty">No task loaded yet. Enter an ID and click "Load Details".</p>';
      }
      function badgeClass(name){
        const k = (name||'').toLowerCase().replace(' ','');
        return k === 'overdue' ? 'overdue' : (k === 'atrisk' ? 'atrisk' : 'ontrack');
      }
      function renderTask(task, comments){
        holder.innerHTML = '';
        const wrap = document.createElement('div');
        wrap.className = 'task-card';

        // Header
        const head = document.createElement('div');
        head.className = 'heading';
        const title = document.createElement('div'); title.className = 'title'; title.textContent = task.title;
        const badge = document.createElement('span'); badge.className = 'badge ' + badgeClass(task.statusBadge); badge.textContent = task.statusBadge;
        head.appendChild(title); head.appendChild(badge);

        // Key/values
        const kv = document.createElement('div'); kv.className = 'kv';
        function kvItem(label, value){
          const box = document.createElement('div'); box.className='item';
          const l = document.createElement('div'); l.className='label'; l.textContent = label;
          const v = document.createElement('div'); v.className='value'; v.textContent = value ?? '-';
          box.appendChild(l); box.appendChild(v); return box;
        }
        kv.appendChild(kvItem('Priority', task.priority));
        kv.appendChild(kvItem('Status', task.status));
        kv.appendChild(kvItem('Assignee ID', task.assignee_id ?? task.assigneeId ?? '-'));
        const dueStr = task.due_date || task.dueDate ? new Date(task.due_date || task.dueDate).toLocaleString() : '-';
        kv.appendChild(kvItem('Due Date', dueStr));

        // Description
        const desc = document.createElement('div'); desc.className='desc';
        desc.innerHTML = '<strong>Description</strong><br>' + (task.description || '<span class="small muted">No description</span>');

        // Comments
        const cWrap = document.createElement('div'); cWrap.className='comments';
        const cTitle = document.createElement('h3'); cTitle.textContent = 'Comments'; cTitle.style.margin='8px 0';
        cWrap.appendChild(cTitle);
        if(!comments || !comments.length){
          const empty = document.createElement('p'); empty.className='small empty'; empty.textContent='No comments yet.';
          cWrap.appendChild(empty);
        } else {
          comments.forEach(c=>{
            const item = document.createElement('div'); item.className='comment';
            const meta = document.createElement('div'); meta.className='meta';
            meta.textContent = `Author: ${c.author_id ?? c.authorId} · ${new Date(c.created_at || c.created).toLocaleString()}`;
            const body = document.createElement('div'); body.textContent = c.body;
            item.appendChild(meta); item.appendChild(body);
            cWrap.appendChild(item);
          });
        }

        wrap.appendChild(head);
        wrap.appendChild(kv);
        wrap.appendChild(desc);
        wrap.appendChild(cWrap);
        holder.appendChild(wrap);
      }

      async function loadTaskById(id){
        if(!checkAuth()) return;
        
        const res = await fetch('/tasks/' + id, { headers: authHeaders() });
        const data = await res.json();
        dOut.textContent = JSON.stringify(data, null, 2);
        
        if(!res.ok){
          if(res.status === 401 || res.status === 403){
            localStorage.removeItem('token');
            JWT = '';
            checkAuth();
            return;
          }
          holder.innerHTML = '<p class="small error">Error: ' + (data.error || res.status) + '</p>';
          return;
        }
        renderTask(data.task, data.comments || []);
      }

      dForm.onsubmit = async (e) => {
        e.preventDefault();
        if(!checkAuth()) return;
        
        const id = Number(dId.value);
        if(!id) return clearHolder();
        loadTaskById(id);
      };

      copyBtn.addEventListener('click', async ()=>{
        const txt = dOut.textContent || '';
        if(!txt.trim()) return alert('Nothing to copy yet.');
        try{ await navigator.clipboard.writeText(txt); alert('JSON copied'); }
        catch{ alert('Copy not supported'); }
      });

      // Check auth on page load
      checkAuth();
    })();
