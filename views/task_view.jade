//- views/task_view.jade
extends layout

block content
  //- Clean, readable theme (design-only changes)
  style.
    :root{
      /* simple, muted palette */
      --bg:#0f1220;
      --panel:#141a24;
      --panel-2:#121a26;
      --line:#223049;
      --text:#e8edf6;
      --muted:#9aa7bf;
      --brand:#7cb3ff;
      --brand-2:#b49cff;
      --ok:#34d399; --warn:#f59e0b; --bad:#ef6464;
      --radius:12px; --shadow:0 6px 18px rgba(0,0,0,.28);
      --focus:0 0 0 3px rgba(124,179,255,.18);
    }
    body{
      background: var(--bg);
      color:var(--text);
      margin:0;
      -webkit-font-smoothing:antialiased;
      -moz-osx-font-smoothing:grayscale;
    }
    .wrap{max-width:900px;margin:1.6rem auto;padding:0 1rem}
    .pagehead{
      display:flex;align-items:center;justify-content:space-between;margin-bottom:.6rem;
    }
    .brand{
      display:flex;align-items:center;gap:.6rem;font-weight:800;letter-spacing:.2px;color:#dce7ff
    }
    .brand .dot{width:10px;height:10px;border-radius:50%;background:var(--brand)}
    .brand small{color:var(--muted);font-weight:600}
    .card{
      background:var(--panel);
      border:1px solid var(--line);
      border-radius:var(--radius);
      box-shadow:var(--shadow);
      padding:1rem;
      margin-bottom:.9rem;
    }
    h2{margin:0 0 .55rem;font-size:1.1rem;letter-spacing:.15px}
    label{display:block;margin:.5rem 0 .3rem;font-weight:800;color:#e3eafc;font-size:.93rem}

    /* inputs & buttons */
    input, button{
      width:100%; padding:.7rem .9rem; border-radius:10px;
      border:1px solid var(--line); background:#0f1726; color:var(--text);
      outline:none; transition:border-color .12s ease, box-shadow .12s ease, transform .05s ease;
    }
    input::placeholder{color:#8894ab}
    input:focus{border-color:var(--brand); box-shadow:var(--focus)}
    .row{display:flex;gap:12px;flex-wrap:wrap}
    .col{flex:1 1 200px; min-width:200px}
    .btn{
      border:1px solid rgba(124,179,255,.45);
      background:#101b2e;
      font-weight:800; cursor:pointer; letter-spacing:.2px;
      transition:filter .15s ease, transform .05s ease, box-shadow .15s ease;
    }
    .btn:hover{filter:brightness(1.06)}
    .btn:active{transform:translateY(1px)}
    .toolbar{display:flex;gap:10px;align-items:center;margin-top:.55rem;flex-wrap:wrap}
    .toolbar .btn{width:auto;padding:.6rem .9rem}
    .small{color:var(--muted);font-size:.9rem}

    /* Viewer pieces */
    .task-card{display:grid;grid-template-columns:1fr;gap:10px;margin-top:.2rem}
    .heading{display:flex;align-items:center;gap:8px;flex-wrap:wrap}
    .title{font-weight:900;letter-spacing:.02em;font-size:1.22rem}
    .badge{display:inline-block;padding:.22rem .6rem;border-radius:999px;font-size:.74rem;font-weight:800}
    .badge.ontrack{background:rgba(52,211,153,.12);border:1px solid rgba(52,211,153,.5);color:#22c55e}
    .badge.atrisk{background:rgba(245,158,11,.12);border:1px solid rgba(245,158,11,.5);color:#f59e0b}
    .badge.overdue{background:rgba(239,100,100,.12);border:1px solid rgba(239,100,100,.5);color:#ef6464}

    .kv{display:grid;grid-template-columns:repeat(2,minmax(0,1fr));gap:10px}
    @media (max-width:640px){.kv{grid-template-columns:1fr}}
    .item{background:var(--panel-2);border:1px solid var(--line);border-radius:10px;padding:.6rem .75rem}
    .item .label{color:var(--muted);font-size:.8rem}
    .item .value{font-weight:800;margin-top:2px}
    .desc{background:var(--panel-2);border:1px solid var(--line);border-radius:10px;padding:.75rem}
    .desc strong{color:#e3eafc}

    /* Comments */
    .comments{margin-top:.25rem}
    .comments h3{margin:6px 0;font-size:1rem;letter-spacing:.15px}
    .comment{border:1px solid var(--line);border-radius:10px;padding:.7rem .8rem;background:#101a2c}
    .comment + .comment{margin-top:8px}
    .comment .meta{color:var(--muted);font-size:.8rem;margin-bottom:.25rem}

    /* States & debug */
    .empty{color:var(--muted);padding:.55rem 0}
    .error{color:#fca5a5}
    pre.json{
      background:#0b0f1a;color:#e3e7ef;border:1px solid var(--line);
      border-radius:10px;padding:10px;overflow:auto
    }

  .wrap
    .pagehead
      .brand
        .dot
        span Task Viewer
        small · Quick lookup by ID
      a.small(href="/board" style="text-decoration:none") ← Back to Board

    section.card
      h2 Task Details (by ID)
      form#detailForm
        .row
          .col
            label(for='dId') Task ID
            input#dId(type='number' min='1' placeholder='e.g., 1' required)
          .col
            label &nbsp;
            button.btn(type='submit') Load Details
      .toolbar
        button.btn#copyJson(type='button') Copy JSON
        a.btn(href="/board" style="text-decoration:none") Open Board →

    section.card#taskHolder
      p.small.empty No task loaded yet. Enter an ID and click “Load Details”.

    //- Optional raw JSON (collapsed unless needed)
    details(class="card" style="margin-top:1rem")
      summary(style="cursor:pointer") Raw JSON (debug)
      pre.json#detailOut (details will appear here)

  // Inline JS (unchanged)
  script.
    (function(){
      const dForm = document.getElementById('detailForm');
      const dId = document.getElementById('dId');
      const dOut = document.getElementById('detailOut');
      const holder = document.getElementById('taskHolder');
      const copyBtn = document.getElementById('copyJson');

      let JWT = localStorage.getItem('token') || '';
      function authHeaders(){ return JWT ? { Authorization:'Bearer '+JWT } : {}; }
      function clearHolder(){
        holder.innerHTML = '<p class="small empty">No task loaded yet. Enter an ID and click “Load Details”.</p>';
      }
      function badgeClass(name){
        const k = (name||'').toLowerCase().replace(' ','');
        return k === 'overdue' ? 'overdue' : (k === 'atrisk' ? 'atrisk' : 'ontrack');
      }
      function renderTask(task, comments){
        holder.innerHTML = '';
        const wrap = document.createElement('div');
        wrap.className = 'task-card';

        // Header
        const head = document.createElement('div');
        head.className = 'heading';
        const title = document.createElement('div'); title.className = 'title'; title.textContent = task.title;
        const badge = document.createElement('span'); badge.className = 'badge ' + badgeClass(task.statusBadge); badge.textContent = task.statusBadge;
        head.appendChild(title); head.appendChild(badge);

        // Key/values
        const kv = document.createElement('div'); kv.className = 'kv';
        function kvItem(label, value){
          const box = document.createElement('div'); box.className='item';
          const l = document.createElement('div'); l.className='label'; l.textContent = label;
          const v = document.createElement('div'); v.className='value'; v.textContent = value ?? '-';
          box.appendChild(l); box.appendChild(v); return box;
        }
        kv.appendChild(kvItem('Priority', task.priority));
        kv.appendChild(kvItem('Status', task.status));
        kv.appendChild(kvItem('Assignee ID', task.assignee_id ?? task.assigneeId ?? '-'));
        const dueStr = task.due_date || task.dueDate ? new Date(task.due_date || task.dueDate).toLocaleString() : '-';
        kv.appendChild(kvItem('Due Date', dueStr));

        // Description
        const desc = document.createElement('div'); desc.className='desc';
        desc.innerHTML = '<strong>Description</strong><br>' + (task.description || '<span class="small muted">No description</span>');

        // Comments
        const cWrap = document.createElement('div'); cWrap.className='comments';
        const cTitle = document.createElement('h3'); cTitle.textContent = 'Comments'; cTitle.style.margin='8px 0';
        cWrap.appendChild(cTitle);
        if(!comments || !comments.length){
          const empty = document.createElement('p'); empty.className='small empty'; empty.textContent='No comments yet.';
          cWrap.appendChild(empty);
        } else {
          comments.forEach(c=>{
            const item = document.createElement('div'); item.className='comment';
            const meta = document.createElement('div'); meta.className='meta';
            meta.textContent = `Author: ${c.author_id ?? c.authorId} · ${new Date(c.created_at || c.created).toLocaleString()}`;
            const body = document.createElement('div'); body.textContent = c.body;
            item.appendChild(meta); item.appendChild(body);
            cWrap.appendChild(item);
          });
        }

        wrap.appendChild(head);
        wrap.appendChild(kv);
        wrap.appendChild(desc);
        wrap.appendChild(cWrap);
        holder.appendChild(wrap);
      }

      async function loadTaskById(id){
        const res = await fetch('/tasks/' + id, { headers: authHeaders() });
        const data = await res.json();
        dOut.textContent = JSON.stringify(data, null, 2);
        if(!res.ok){
          holder.innerHTML = '<p class="small error">Error: ' + (data.error || res.status) + '</p>';
          return;
        }
        renderTask(data.task, data.comments || []);
      }

      dForm.onsubmit = async (e) => {
        e.preventDefault();
        if(!JWT) return alert('Log in first (see /auth)');
        const id = Number(dId.value);
        if(!id) return clearHolder();
        loadTaskById(id);
      };

      copyBtn.addEventListener('click', async ()=>{
        const txt = dOut.textContent || '';
        if(!txt.trim()) return alert('Nothing to copy yet.');
        try{ await navigator.clipboard.writeText(txt); alert('JSON copied'); }
        catch{ alert('Copy not supported'); }
      });
    })();
