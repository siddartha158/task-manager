//- views/task_view.jade
extends layout

block content
  //- Inline CSS for a clean, modern viewer
  style.
    :root{
      --bg1:#0f172a; --bg2:#0b1222; --glass:rgba(255,255,255,.06); --border:rgba(255,255,255,.14);
      --text:#e5e7eb; --muted:#94a3b8; --blue:#60a5fa; --violet:#a78bfa; --green:#34d399; --amber:#f59e0b; --red:#f87171;
      --shadow:0 16px 40px rgba(0,0,0,.45); --radius:16px;
    }
    body{
      background:
        radial-gradient(1200px 820px at 12% 10%, #0b1222 0%, transparent 60%),
        radial-gradient(1200px 820px at 88% 15%, #141e36 0%, transparent 60%),
        linear-gradient(180deg, var(--bg1), var(--bg2));
      color:var(--text);
    }
    .wrap{max-width:900px;margin:2rem auto;padding:0 1rem;}
    .card{
      background:linear-gradient(180deg, rgba(255,255,255,.07), rgba(255,255,255,.045));
      border:1px solid var(--border); border-radius:var(--radius);
      box-shadow:var(--shadow); padding:1.25rem; backdrop-filter:blur(10px);
      margin-bottom:1rem;
    }
    h2{margin:0 0 .75rem; font-size:clamp(1.3rem,2.8vw,1.7rem)}
    label{display:block; margin:.6rem 0 .35rem; font-weight:600}
    input, button{
      width:100%; padding:.75rem 1rem; border-radius:12px; border:1px solid var(--border);
      background:rgba(255,255,255,.04); color:var(--text);
      transition:border-color .15s ease, box-shadow .15s ease, transform .08s ease;
    }
    input:focus{
      border-color:rgba(96,165,250,.7); box-shadow:0 0 0 4px rgba(96,165,250,.18); outline:none;
    }
    .row{display:flex; gap:12px; flex-wrap:wrap}
    .col{flex:1 1 200px; min-width:200px}
    .btn{
      border:1px solid rgba(96,165,250,.45);
      background:linear-gradient(135deg, rgba(96,165,250,.25), rgba(167,139,250,.22));
      font-weight:700; cursor:pointer;
    }
    .btn:hover{transform:translateY(-1px); background:linear-gradient(135deg, rgba(96,165,250,.35), rgba(167,139,250,.3))}
    .toolbar{display:flex; gap:10px; align-items:center; margin-top:.6rem}
    .toolbar .btn{width:auto; padding:.6rem .9rem}
    .small{color:var(--muted); font-size:.92rem}
    /* Task card */
    .task-card{display:grid; grid-template-columns:1fr; gap:10px; margin-top:.25rem}
    .heading{display:flex; align-items:center; gap:8px; flex-wrap:wrap}
    .title{font-weight:900; letter-spacing:.02em; font-size:1.25rem}
    .badge{display:inline-block; padding:.25rem .6rem; border-radius:999px; font-size:.75rem; font-weight:800}
    .badge.ontrack{background:rgba(52,211,153,.18); border:1px solid rgba(52,211,153,.55); color:#10b981}
    .badge.atrisk{background:rgba(245,158,11,.18); border:1px solid rgba(245,158,11,.55); color:#f59e0b}
    .badge.overdue{background:rgba(248,113,113,.18); border:1px solid rgba(248,113,113,.55); color:#f87171}
    .kv{display:grid; grid-template-columns:repeat(2, minmax(0,1fr)); gap:10px}
    @media (max-width:640px){ .kv{grid-template-columns:1fr} }
    .item{background:rgba(255,255,255,.04); border:1px solid var(--border); border-radius:12px; padding:.6rem .8rem}
    .item .label{color:var(--muted); font-size:.8rem}
    .item .value{font-weight:700; margin-top:2px}
    .desc{background:rgba(255,255,255,.04); border:1px solid var(--border); border-radius:12px; padding:.8rem}
    /* Comments */
    .comments{margin-top:.5rem}
    .comment{border:1px solid var(--border); border-radius:12px; padding:.7rem .8rem; background:rgba(255,255,255,.04)}
    .comment .meta{color:var(--muted); font-size:.8rem; margin-bottom:.2rem}
    /* Empty state / error */
    .empty{color:var(--muted); padding:.6rem 0}
    .error{color:#fca5a5}
    /* JSON block (optional) */
    pre.json{background:#0b0f1a; color:#e3e7ef; border:1px solid var(--border); border-radius:12px; padding:10px; overflow:auto}

  .wrap
    section.card
      h2 Task Details (by ID)
      form#detailForm
        .row
          .col
            label(for='dId') Task ID
            input#dId(type='number' min='1' placeholder='e.g., 1' required)
          .col
            label &nbsp;
            button.btn(type='submit') Load Details
      .toolbar
        button.btn#copyJson(type='button') Copy JSON
        a.btn(href="/board" style="text-decoration:none") ← Back to Board

    section.card#taskHolder
      p.small.empty No task loaded yet. Enter an ID and click “Load Details”.

    //- Optional raw JSON (collapsed unless needed)
    details(class="card" style="margin-top:1rem")
      summary(style="cursor:pointer") Raw JSON (debug)
      pre.json#detailOut (details will appear here)

  // Inline JS
  script.
    (function(){
      const dForm = document.getElementById('detailForm');
      const dId = document.getElementById('dId');
      const dOut = document.getElementById('detailOut');
      const holder = document.getElementById('taskHolder');
      const copyBtn = document.getElementById('copyJson');

      let JWT = localStorage.getItem('token') || '';
      function authHeaders(){ return JWT ? { Authorization:'Bearer '+JWT } : {}; }
      function clearHolder(){
        holder.innerHTML = '<p class="small empty">No task loaded yet. Enter an ID and click “Load Details”.</p>';
      }
      function badgeClass(name){
        const k = (name||'').toLowerCase().replace(' ','');
        return k === 'overdue' ? 'overdue' : (k === 'atrisk' ? 'atrisk' : 'ontrack');
      }
      function renderTask(task, comments){
        holder.innerHTML = '';
        const wrap = document.createElement('div');
        wrap.className = 'task-card';

        // Header
        const head = document.createElement('div');
        head.className = 'heading';
        const title = document.createElement('div'); title.className = 'title'; title.textContent = task.title;
        const badge = document.createElement('span'); badge.className = 'badge ' + badgeClass(task.statusBadge); badge.textContent = task.statusBadge;
        head.appendChild(title); head.appendChild(badge);

        // Key/values
        const kv = document.createElement('div'); kv.className = 'kv';
        function kvItem(label, value){
          const box = document.createElement('div'); box.className='item';
          const l = document.createElement('div'); l.className='label'; l.textContent = label;
          const v = document.createElement('div'); v.className='value'; v.textContent = value ?? '-';
          box.appendChild(l); box.appendChild(v); return box;
        }
        kv.appendChild(kvItem('Priority', task.priority));
        kv.appendChild(kvItem('Status', task.status));
        kv.appendChild(kvItem('Assignee ID', task.assignee_id ?? task.assigneeId ?? '-'));
        const dueStr = task.due_date || task.dueDate ? new Date(task.due_date || task.dueDate).toLocaleString() : '-';
        kv.appendChild(kvItem('Due Date', dueStr));

        // Description
        const desc = document.createElement('div'); desc.className='desc';
        desc.innerHTML = '<strong>Description</strong><br>' + (task.description || '<span class="small muted">No description</span>');

        // Comments
        const cWrap = document.createElement('div'); cWrap.className='comments';
        const cTitle = document.createElement('h3'); cTitle.textContent = 'Comments'; cTitle.style.margin='8px 0';
        cWrap.appendChild(cTitle);
        if(!comments || !comments.length){
          const empty = document.createElement('p'); empty.className='small empty'; empty.textContent='No comments yet.';
          cWrap.appendChild(empty);
        } else {
          comments.forEach(c=>{
            const item = document.createElement('div'); item.className='comment';
            const meta = document.createElement('div'); meta.className='meta';
            meta.textContent = `Author: ${c.author_id ?? c.authorId} · ${new Date(c.created_at || c.created).toLocaleString()}`;
            const body = document.createElement('div'); body.textContent = c.body;
            item.appendChild(meta); item.appendChild(body);
            cWrap.appendChild(item);
          });
        }

        wrap.appendChild(head);
        wrap.appendChild(kv);
        wrap.appendChild(desc);
        wrap.appendChild(cWrap);
        holder.appendChild(wrap);
      }

      async function loadTaskById(id){
        const res = await fetch('/tasks/' + id, { headers: authHeaders() });
        const data = await res.json();
        dOut.textContent = JSON.stringify(data, null, 2);
        if(!res.ok){
          holder.innerHTML = '<p class="small error">Error: ' + (data.error || res.status) + '</p>';
          return;
        }
        renderTask(data.task, data.comments || []);
      }

      dForm.onsubmit = async (e) => {
        e.preventDefault();
        if(!JWT) return alert('Log in first (see /auth)');
        const id = Number(dId.value);
        if(!id) return clearHolder();
        loadTaskById(id);
      };

      copyBtn.addEventListener('click', async ()=>{
        const txt = dOut.textContent || '';
        if(!txt.trim()) return alert('Nothing to copy yet.');
        try{ await navigator.clipboard.writeText(txt); alert('JSON copied'); }
        catch{ alert('Copy not supported'); }
      });
    })();
